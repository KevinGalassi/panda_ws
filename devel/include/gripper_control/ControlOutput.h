// Generated by gencpp from file gripper_control/ControlOutput.msg
// DO NOT EDIT!


#ifndef GRIPPER_CONTROL_MESSAGE_CONTROLOUTPUT_H
#define GRIPPER_CONTROL_MESSAGE_CONTROLOUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gripper_control
{
template <class ContainerAllocator>
struct ControlOutput_
{
  typedef ControlOutput_<ContainerAllocator> Type;

  ControlOutput_()
    : output(0.0)
    , output_sat(0.0)
    , gripper_position(0.0)
    , error(0.0)
    , reference(0.0)
    , lower_bound(0.0)
    , upper_bound(0.0)
    , actual_value(0.0)  {
    }
  ControlOutput_(const ContainerAllocator& _alloc)
    : output(0.0)
    , output_sat(0.0)
    , gripper_position(0.0)
    , error(0.0)
    , reference(0.0)
    , lower_bound(0.0)
    , upper_bound(0.0)
    , actual_value(0.0)  {
  (void)_alloc;
    }



   typedef double _output_type;
  _output_type output;

   typedef double _output_sat_type;
  _output_sat_type output_sat;

   typedef double _gripper_position_type;
  _gripper_position_type gripper_position;

   typedef double _error_type;
  _error_type error;

   typedef double _reference_type;
  _reference_type reference;

   typedef double _lower_bound_type;
  _lower_bound_type lower_bound;

   typedef double _upper_bound_type;
  _upper_bound_type upper_bound;

   typedef double _actual_value_type;
  _actual_value_type actual_value;





  typedef boost::shared_ptr< ::gripper_control::ControlOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gripper_control::ControlOutput_<ContainerAllocator> const> ConstPtr;

}; // struct ControlOutput_

typedef ::gripper_control::ControlOutput_<std::allocator<void> > ControlOutput;

typedef boost::shared_ptr< ::gripper_control::ControlOutput > ControlOutputPtr;
typedef boost::shared_ptr< ::gripper_control::ControlOutput const> ControlOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gripper_control::ControlOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gripper_control::ControlOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gripper_control::ControlOutput_<ContainerAllocator1> & lhs, const ::gripper_control::ControlOutput_<ContainerAllocator2> & rhs)
{
  return lhs.output == rhs.output &&
    lhs.output_sat == rhs.output_sat &&
    lhs.gripper_position == rhs.gripper_position &&
    lhs.error == rhs.error &&
    lhs.reference == rhs.reference &&
    lhs.lower_bound == rhs.lower_bound &&
    lhs.upper_bound == rhs.upper_bound &&
    lhs.actual_value == rhs.actual_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gripper_control::ControlOutput_<ContainerAllocator1> & lhs, const ::gripper_control::ControlOutput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gripper_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gripper_control::ControlOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gripper_control::ControlOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gripper_control::ControlOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gripper_control::ControlOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_control::ControlOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_control::ControlOutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gripper_control::ControlOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d113725e502b53b0e53b00acafaa65f";
  }

  static const char* value(const ::gripper_control::ControlOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d113725e502b53bULL;
  static const uint64_t static_value2 = 0x0e53b00acafaa65fULL;
};

template<class ContainerAllocator>
struct DataType< ::gripper_control::ControlOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gripper_control/ControlOutput";
  }

  static const char* value(const ::gripper_control::ControlOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gripper_control::ControlOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 output\n"
"float64 output_sat\n"
"float64 gripper_position\n"
"float64 error\n"
"float64 reference\n"
"float64 lower_bound\n"
"float64 upper_bound\n"
"float64 actual_value\n"
;
  }

  static const char* value(const ::gripper_control::ControlOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gripper_control::ControlOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
      stream.next(m.output_sat);
      stream.next(m.gripper_position);
      stream.next(m.error);
      stream.next(m.reference);
      stream.next(m.lower_bound);
      stream.next(m.upper_bound);
      stream.next(m.actual_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gripper_control::ControlOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gripper_control::ControlOutput_<ContainerAllocator>& v)
  {
    s << indent << "output: ";
    Printer<double>::stream(s, indent + "  ", v.output);
    s << indent << "output_sat: ";
    Printer<double>::stream(s, indent + "  ", v.output_sat);
    s << indent << "gripper_position: ";
    Printer<double>::stream(s, indent + "  ", v.gripper_position);
    s << indent << "error: ";
    Printer<double>::stream(s, indent + "  ", v.error);
    s << indent << "reference: ";
    Printer<double>::stream(s, indent + "  ", v.reference);
    s << indent << "lower_bound: ";
    Printer<double>::stream(s, indent + "  ", v.lower_bound);
    s << indent << "upper_bound: ";
    Printer<double>::stream(s, indent + "  ", v.upper_bound);
    s << indent << "actual_value: ";
    Printer<double>::stream(s, indent + "  ", v.actual_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIPPER_CONTROL_MESSAGE_CONTROLOUTPUT_H
