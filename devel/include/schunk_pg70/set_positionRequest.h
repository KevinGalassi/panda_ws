// Generated by gencpp from file schunk_pg70/set_positionRequest.msg
// DO NOT EDIT!


#ifndef SCHUNK_PG70_MESSAGE_SET_POSITIONREQUEST_H
#define SCHUNK_PG70_MESSAGE_SET_POSITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace schunk_pg70
{
template <class ContainerAllocator>
struct set_positionRequest_
{
  typedef set_positionRequest_<ContainerAllocator> Type;

  set_positionRequest_()
    : goal_position(0.0)
    , goal_velocity(0.0)
    , goal_acceleration(0.0)  {
    }
  set_positionRequest_(const ContainerAllocator& _alloc)
    : goal_position(0.0)
    , goal_velocity(0.0)
    , goal_acceleration(0.0)  {
  (void)_alloc;
    }



   typedef float _goal_position_type;
  _goal_position_type goal_position;

   typedef float _goal_velocity_type;
  _goal_velocity_type goal_velocity;

   typedef float _goal_acceleration_type;
  _goal_acceleration_type goal_acceleration;





  typedef boost::shared_ptr< ::schunk_pg70::set_positionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::schunk_pg70::set_positionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_positionRequest_

typedef ::schunk_pg70::set_positionRequest_<std::allocator<void> > set_positionRequest;

typedef boost::shared_ptr< ::schunk_pg70::set_positionRequest > set_positionRequestPtr;
typedef boost::shared_ptr< ::schunk_pg70::set_positionRequest const> set_positionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::schunk_pg70::set_positionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::schunk_pg70::set_positionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::schunk_pg70::set_positionRequest_<ContainerAllocator1> & lhs, const ::schunk_pg70::set_positionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal_position == rhs.goal_position &&
    lhs.goal_velocity == rhs.goal_velocity &&
    lhs.goal_acceleration == rhs.goal_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::schunk_pg70::set_positionRequest_<ContainerAllocator1> & lhs, const ::schunk_pg70::set_positionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace schunk_pg70

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::schunk_pg70::set_positionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::schunk_pg70::set_positionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::schunk_pg70::set_positionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::schunk_pg70::set_positionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::schunk_pg70::set_positionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::schunk_pg70::set_positionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::schunk_pg70::set_positionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "319b6d57a431ad4ba5699f76bb8b9f71";
  }

  static const char* value(const ::schunk_pg70::set_positionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x319b6d57a431ad4bULL;
  static const uint64_t static_value2 = 0xa5699f76bb8b9f71ULL;
};

template<class ContainerAllocator>
struct DataType< ::schunk_pg70::set_positionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "schunk_pg70/set_positionRequest";
  }

  static const char* value(const ::schunk_pg70::set_positionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::schunk_pg70::set_positionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 goal_position\n"
"float32 goal_velocity\n"
"float32 goal_acceleration\n"
;
  }

  static const char* value(const ::schunk_pg70::set_positionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::schunk_pg70::set_positionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_position);
      stream.next(m.goal_velocity);
      stream.next(m.goal_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_positionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::schunk_pg70::set_positionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::schunk_pg70::set_positionRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_position: ";
    Printer<float>::stream(s, indent + "  ", v.goal_position);
    s << indent << "goal_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.goal_velocity);
    s << indent << "goal_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.goal_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCHUNK_PG70_MESSAGE_SET_POSITIONREQUEST_H
